{"version":3,"file":"content.js","sources":["../src/extension/store.js","../src/extension/main.js"],"sourcesContent":["// chatgptBookmarks.js\n\n// Open (or create) the IndexedDB database\nfunction openBookmarksDB(callback) {\n  const request = indexedDB.open(\"chatgpt-bookmarks\", 1);\n\n  request.onupgradeneeded = (event) => {\n    const db = event.target.result;\n\n    // Create object store with keyPath = id (e.g., \"abc123:5\")\n    const store = db.createObjectStore(\"bookmarks\", { keyPath: \"id\" });\n\n    // Create an index to query all bookmarks by conversationId\n    store.createIndex(\"by_conversation\", \"conversationId\");\n  };\n\n  request.onsuccess = (event) => {\n    const db = event.target.result;\n    callback(db);\n  };\n\n  request.onerror = (event) => {\n    console.error(\"Failed to open DB\", event.target.error);\n  };\n}\n\n// Generate default bookmark name like \"Bookmark 1\", \"Bookmark 2\", etc.\nfunction getNextBookmarkName(db, conversationId, callback) {\n  const tx = db.transaction(\"bookmarks\", \"readonly\");\n  const store = tx.objectStore(\"bookmarks\");\n  const index = store.index(\"by_conversation\");\n\n  const request = index.getAll(IDBKeyRange.only(conversationId));\n\n  request.onsuccess = () => {\n    const count = request.result.length;\n    callback(`Bookmark ${count + 1}`);\n  };\n\n  request.onerror = () => {\n    callback(\"Bookmark 1\"); // fallback\n  };\n}\n\n// Save a bookmark (auto-generates name if not provided)\nfunction saveBookmark(db, { conversationId, turnIndex, name }) {\n  const id = `${conversationId}:${turnIndex}`;\n\n  if (name) {\n    const tx = db.transaction(\"bookmarks\", \"readwrite\");\n    const store = tx.objectStore(\"bookmarks\");\n\n    store.put({\n      id,\n      conversationId,\n      turnIndex,\n      name,\n      createdAt: Date.now(),\n    });\n\n    tx.oncomplete = () =>\n      console.log(\"Bookmark saved:\", name, conversationId, turnIndex);\n  } else {\n    getNextBookmarkName(db, conversationId, (autoName) => {\n      const tx = db.transaction(\"bookmarks\", \"readwrite\");\n      const store = tx.objectStore(\"bookmarks\");\n\n      store.put({\n        id,\n        conversationId,\n        turnIndex,\n        name: autoName,\n        createdAt: Date.now(),\n      });\n\n      tx.oncomplete = () =>\n        console.log(\"Bookmark saved:\", autoName, conversationId, turnIndex);\n    });\n  }\n}\n\n// Fetch all bookmarks for a conversation\nfunction getBookmarksForConversation(db, conversationId, callback) {\n  const tx = db.transaction(\"bookmarks\", \"readonly\");\n  const store = tx.objectStore(\"bookmarks\");\n  const index = store.index(\"by_conversation\");\n\n  const request = index.getAll(IDBKeyRange.only(conversationId));\n  request.onsuccess = () => {\n    callback(request.result);\n  };\n  request.onerror = () => {\n    callback([]);\n  };\n}\n\n// Update the name of an existing bookmark\nfunction updateBookmarkName(db, id, newName) {\n  const tx = db.transaction(\"bookmarks\", \"readwrite\");\n  const store = tx.objectStore(\"bookmarks\");\n\n  const request = store.get(id);\n  request.onsuccess = () => {\n    const data = request.result;\n    if (data) {\n      data.name = newName;\n      store.put(data);\n      console.log(\"Bookmark name updated to:\", newName);\n    }\n  };\n}\n\n// Log all bookmarks in the database\nfunction logAllBookmarks() {\n  openBookmarksDB((db) => {\n    const tx = db.transaction(\"bookmarks\", \"readonly\");\n    const store = tx.objectStore(\"bookmarks\");\n    const request = store.getAll();\n\n    request.onsuccess = () => {\n      const bookmarks = request.result;\n      console.log(\"All saved bookmarks:\", bookmarks);\n\n      // Group bookmarks by conversation\n      const byConversation = bookmarks.reduce((acc, bookmark) => {\n        if (!acc[bookmark.conversationId]) {\n          acc[bookmark.conversationId] = [];\n        }\n        acc[bookmark.conversationId].push(bookmark);\n        return acc;\n      }, {});\n\n      console.log(\"Bookmarks grouped by conversation:\", byConversation);\n    };\n  });\n}\n\n// Delete a bookmark by its ID\nfunction deleteBookmark(db, id) {\n  const tx = db.transaction(\"bookmarks\", \"readwrite\");\n  const store = tx.objectStore(\"bookmarks\");\n\n  store.delete(id);\n\n  tx.oncomplete = () => {\n    console.log(\"Bookmark deleted:\", id);\n  };\n\n  tx.onerror = (event) => {\n    console.error(\"Error deleting bookmark:\", event.target.error);\n  };\n}\n\n// Example usage\n// openBookmarksDB((db) => {\n//   saveBookmark(db, {\n//     conversationId: \"abc123\",\n//     turnIndex: 5,\n//     // name: \"My custom bookmark\"  // optional\n//   });\n\n//   getBookmarksForConversation(db, \"abc123\", (bookmarks) => {\n//     console.log(\"Bookmarks for conversation abc123:\", bookmarks);\n//   });\n\n//   updateBookmarkName(db, \"abc123:5\", \"Updated Name\");\n// });\n\n// Expose functions globally\nwindow.ChatGPTBookmarks = {\n  openBookmarksDB,\n  saveBookmark,\n  getBookmarksForConversation,\n  updateBookmarkName,\n  logAllBookmarks,\n  deleteBookmark,\n};\n","// Content script for ChatGPT Bookmark extension\nconsole.log(\"ChatGPT Bookmark extension loaded!!\");\n\n// Solid orange bookmark with white star (for toggle and add button)\nconst solidBookmarkIcon = `\n  <svg width=\"16\" height=\"22\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M0,0 h100 v120 l-50,-30 l-50,30 z\" fill=\"#F4A300\" />\n    <polygon fill=\"white\" points=\"50,22 58,42 78,42 62,56 68,76 50,64 32,76 38,56 22,42 42,42\" />\n  </svg>\n`;\n\n// Hollow yellow bookmark with white star (for floating list)\nconst hollowBookmarkIcon = `\n  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"14\" width=\"14\" viewBox=\"0 0 24 24\">\n    <path fill=\"none\" stroke=\"#FFA500\" stroke-width=\"2\" d=\"M5 3a2 2 0 0 0-2 2v16l9-4 9 4V5a2 2 0 0 0-2-2H5z\"/>\n    <path fill=\"#fff\" d=\"M12 8.5l1.45 2.95 3.25.47-2.35 2.29.56 3.24L12 15.27l-2.91 1.53.56-3.24-2.35-2.29 3.25-.47z\"/>\n  </svg>\n`;\n\nconst bookmarkIcon = solidBookmarkIcon;\n\n// Chevron up icon for minimize\nconst closeIcon = `\n  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" viewBox=\"0 0 16 16\">\n    <polyline points=\"4 10 8 6 12 10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  </svg>\n`;\n\n// Create and add floating bookmark list\nfunction createBookmarkList() {\n  // Create toggle button\n  const toggleBtn = document.createElement(\"button\");\n  Object.assign(toggleBtn.style, {\n    position: \"fixed\",\n    top: \"56px\",\n    right: \"20px\",\n    background: \"white\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"6px\",\n    padding: \"6px\",\n    cursor: \"pointer\",\n    zIndex: \"10000\",\n    boxShadow: \"0 2px 10px rgba(0,0,0,0.1)\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: \"32px\",\n    width: \"32px\",\n  });\n\n  // Start with the list hidden, but if it's shown, use X icon and no border\n  let isListVisible = false;\n  toggleBtn.innerHTML = solidBookmarkIcon;\n  toggleBtn.title = \"Show Bookmarks\";\n\n  const container = document.createElement(\"div\");\n  Object.assign(container.style, {\n    position: \"fixed\",\n    top: \"56px\",\n    right: \"20px\",\n    background: \"white\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"6px\",\n    padding: \"8px\",\n    maxHeight: \"70vh\",\n    overflowY: \"auto\",\n    zIndex: \"9999\",\n    boxShadow: \"0 2px 10px rgba(0,0,0,0.1)\",\n    minWidth: \"180px\",\n    fontSize: \"13px\",\n    display: \"none\",\n  });\n\n  const title = document.createElement(\"h3\");\n  title.textContent = \"Bookmarks\";\n  Object.assign(title.style, {\n    margin: \"0 0 8px 0\",\n    fontSize: \"14px\",\n    fontWeight: \"500\",\n  });\n  container.appendChild(title);\n\n  const list = document.createElement(\"div\");\n  list.id = \"bookmark-list\";\n  container.appendChild(list);\n\n  // Add toggle functionality\n  toggleBtn.addEventListener(\"click\", () => {\n    isListVisible = container.style.display !== \"block\";\n    container.style.display = isListVisible ? \"block\" : \"none\";\n    toggleBtn.title = isListVisible ? \"Hide Bookmarks\" : \"Show Bookmarks\";\n    toggleBtn.innerHTML = isListVisible ? closeIcon : solidBookmarkIcon;\n    toggleBtn.style.border = isListVisible ? \"none\" : \"1px solid #ccc\";\n    // Remove background and shadow when open\n    if (isListVisible) {\n      toggleBtn.style.backgroundColor = \"transparent\";\n      toggleBtn.style.boxShadow = \"none\";\n    } else {\n      toggleBtn.style.backgroundColor = \"white\";\n      toggleBtn.style.boxShadow = \"0 2px 10px rgba(0,0,0,0.1)\";\n    }\n  });\n\n  document.body.appendChild(toggleBtn);\n  document.body.appendChild(container);\n  return { container, toggleBtn };\n}\n\n// Update bookmark list with current bookmarks\nfunction updateBookmarkList() {\n  const conversationId = window.location.pathname.split(\"/\").pop();\n  const list = document.getElementById(\"bookmark-list\");\n  const container = list?.parentElement;\n  const toggleBtn = document.querySelector(\n    'button[title^=\"Show Bookmarks\"],button[title^=\"Hide Bookmarks\"]'\n  );\n  if (!list || !container || !toggleBtn) return;\n\n  window.ChatGPTBookmarks.openBookmarksDB((db) => {\n    window.ChatGPTBookmarks.getBookmarksForConversation(\n      db,\n      conversationId,\n      (bookmarks) => {\n        list.innerHTML = \"\";\n\n        if (bookmarks.length === 0) {\n          container.style.display = \"none\";\n          // When hiding, show bookmark icon and border\n          toggleBtn.innerHTML = solidBookmarkIcon;\n          toggleBtn.title = \"Show Bookmarks\";\n          toggleBtn.style.border = \"1px solid #ccc\";\n          toggleBtn.style.backgroundColor = \"white\";\n          return;\n        }\n\n        // Show container if we have bookmarks\n        container.style.display = \"block\";\n        // When showing, use X icon and no border\n        toggleBtn.innerHTML = closeIcon;\n        toggleBtn.title = \"Hide Bookmarks\";\n        toggleBtn.style.border = \"none\";\n        toggleBtn.style.backgroundColor = \"transparent\";\n        toggleBtn.style.boxShadow = \"none\";\n\n        bookmarks\n          .slice()\n          .sort((a, b) => a.turnIndex - b.turnIndex)\n          .forEach((bookmark) => {\n            const item = document.createElement(\"div\");\n            Object.assign(item.style, {\n              padding: \"6px\",\n              borderBottom: \"1px solid #eee\",\n              cursor: \"pointer\",\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"6px\",\n              position: \"relative\",\n              fontSize: \"12px\",\n            });\n\n            const icon = document.createElement(\"div\");\n            icon.innerHTML = hollowBookmarkIcon;\n            item.appendChild(icon);\n\n            const text = document.createElement(\"span\");\n            text.textContent =\n              bookmark.name || `Bookmark ${bookmark.turnIndex}`;\n            text.style.flex = \"1\";\n            item.appendChild(text);\n\n            // Button container for edit and delete\n            const btnContainer = document.createElement(\"div\");\n            btnContainer.style.display = \"flex\";\n            btnContainer.style.alignItems = \"center\";\n            btnContainer.style.gap = \"2px\";\n            btnContainer.style.marginLeft = \"6px\";\n\n            // Add edit (pencil) button\n            const editBtn = document.createElement(\"button\");\n            Object.assign(editBtn.style, {\n              background: \"none\",\n              border: \"none\",\n              cursor: \"pointer\",\n              color: \"#888\",\n              fontSize: \"14px\",\n              padding: \"2px 4px\",\n              display: \"none\",\n            });\n            editBtn.innerHTML = `\n              <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"14\" width=\"14\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 16 16\">\n                <path d=\"M3 13l2.5-2.5M13 3l-8.5 8.5M11.5 2.5a2.121 2.121 0 1 1 3 3L5 15H2v-3L11.5 2.5z\"/>\n              </svg>\n            `;\n            editBtn.title = \"Edit bookmark name\";\n            btnContainer.appendChild(editBtn);\n\n            editBtn.addEventListener(\"click\", (e) => {\n              e.stopPropagation();\n              // Replace text with input\n              const input = document.createElement(\"input\");\n              input.type = \"text\";\n              input.value = bookmark.name || `Bookmark ${bookmark.turnIndex}`;\n              input.style.fontSize = \"12px\";\n              input.style.flex = \"1\";\n              input.style.marginLeft = \"4px\";\n              input.style.padding = \"2px 4px\";\n              input.style.border = \"1px solid #ccc\";\n              input.style.borderRadius = \"3px\";\n              item.replaceChild(input, text);\n              input.focus();\n              input.select();\n\n              function saveEdit() {\n                const newName =\n                  input.value.trim() || `Bookmark ${bookmark.turnIndex}`;\n                window.ChatGPTBookmarks.openBookmarksDB((db) => {\n                  window.ChatGPTBookmarks.updateBookmarkName(\n                    db,\n                    bookmark.id,\n                    newName\n                  );\n                  updateBookmarkList();\n                });\n              }\n\n              input.addEventListener(\"blur\", saveEdit);\n              input.addEventListener(\"keydown\", (ev) => {\n                if (ev.key === \"Enter\") {\n                  input.blur();\n                } else if (ev.key === \"Escape\") {\n                  updateBookmarkList();\n                }\n              });\n            });\n\n            // Add delete button\n            const deleteBtn = document.createElement(\"button\");\n            Object.assign(deleteBtn.style, {\n              background: \"none\",\n              border: \"none\",\n              cursor: \"pointer\",\n              padding: \"2px 4px\",\n              color: \"#666\",\n              fontSize: \"14px\",\n              display: \"none\",\n            });\n            deleteBtn.innerHTML = \"×\";\n            deleteBtn.title = \"Delete bookmark\";\n            deleteBtn.id = `delete-bookmark-btn-${bookmark.id}`;\n            btnContainer.appendChild(deleteBtn);\n\n            // Show/hide both icons on hover\n            item.addEventListener(\"mouseenter\", () => {\n              editBtn.style.display = \"block\";\n              deleteBtn.style.display = \"block\";\n            });\n            item.addEventListener(\"mouseleave\", () => {\n              editBtn.style.display = \"none\";\n              deleteBtn.style.display = \"none\";\n            });\n\n            item.appendChild(btnContainer);\n\n            item.addEventListener(\"click\", (event) => {\n              if (event.target.id === `delete-bookmark-btn-${bookmark.id}`) {\n                window.ChatGPTBookmarks.openBookmarksDB((db) => {\n                  window.ChatGPTBookmarks.deleteBookmark(db, bookmark.id);\n                  updateBookmarkList();\n                });\n\n                return;\n              }\n              // Only scroll if the click did NOT originate from a button (edit or delete)\n              // if (event.target.closest(\"button\")) return;\n              const targetElement = document.querySelector(\n                `[data-testid=\"conversation-turn-${bookmark.turnIndex}\"]`\n              );\n              if (targetElement) {\n                // Scroll to the top of the element\n                targetElement.scrollIntoView({\n                  behavior: \"smooth\",\n                  block: \"start\",\n                });\n                targetElement.style.backgroundColor = \"#fff3cd\";\n                setTimeout(() => {\n                  targetElement.style.backgroundColor = \"\";\n                }, 2000);\n              }\n            });\n\n            list.appendChild(item);\n          });\n      }\n    );\n  });\n}\n\n// Create bookmark list on page load\nconst { container: bookmarkList } = createBookmarkList();\nupdateBookmarkList();\n\n// Watch for URL changes\nlet lastUrl = location.href;\nnew MutationObserver(() => {\n  const currentUrl = location.href;\n  if (currentUrl !== lastUrl) {\n    lastUrl = currentUrl;\n    updateBookmarkList();\n  }\n}).observe(document, { subtree: true, childList: true });\n\n// Function to add bookmark button to a conversation turn\nfunction addBookmarkButton(el, turnNumber) {\n  const button = document.createElement(\"button\");\n  button.className = \"chatgpt-bookmark-button\";\n  button.innerHTML = `\n    ${solidBookmarkIcon}&nbsp;Bookmark\n  `;\n  Object.assign(button.style, {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    border: \"1px solid #ccc\",\n    padding: \"4px 8px\",\n    marginTop: \"10px\",\n    cursor: \"pointer\",\n    background: \"#fff\",\n    borderRadius: \"4px\",\n    fontSize: \"14px\",\n    width: \"100px\",\n    position: \"relative\",\n  });\n\n  // Remove hover card logic\n  // Add click handler to save bookmark\n  button.addEventListener(\"click\", () => {\n    // Get conversation ID from URL\n    const conversationId = window.location.pathname.split(\"/\").pop();\n\n    window.ChatGPTBookmarks.openBookmarksDB((db) => {\n      window.ChatGPTBookmarks.saveBookmark(db, {\n        conversationId,\n        turnIndex: turnNumber,\n        name: `Response ${turnNumber / 2}`,\n      });\n\n      // Update bookmark list after saving\n      updateBookmarkList();\n    });\n  });\n\n  try {\n    el.appendChild(button);\n  } catch (error) {\n    console.error(\"Failed to append button:\", error);\n  }\n}\n\n// Function to process all matching elements\nfunction processElements() {\n  const elements = document.querySelectorAll(\"div.group\\\\/conversation-turn\");\n\n  elements.forEach((el, index) => {\n    // Find the parent article to get the turn number\n    const article = el.closest('article[data-testid^=\"conversation-turn-\"]');\n    if (article) {\n      const turnNumber = parseInt(\n        article.getAttribute(\"data-testid\").split(\"-\").pop()\n      );\n\n      // Only process even-numbered turns (ChatGPT responses)\n      if (turnNumber % 2 === 0) {\n        // Only add button if it doesn't already have our specific button\n        if (!el.querySelector(\".chatgpt-bookmark-button\")) {\n          addBookmarkButton(el, turnNumber);\n        }\n      }\n    }\n  });\n}\n\n// Initial processing\nprocessElements();\n\n// Set up MutationObserver to watch for new conversation turns\nconst observer = new MutationObserver((mutations) => {\n  for (const mutation of mutations) {\n    if (mutation.addedNodes.length) {\n      processElements();\n      break;\n    }\n  }\n});\n\n// Start observing the document body for changes\nobserver.observe(document.body, {\n  childList: true,\n  subtree: true,\n});\n\n// Add your content script logic here\n"],"names":["openBookmarksDB","callback","request","event","db","getNextBookmarkName","conversationId","count","saveBookmark","turnIndex","name","id","tx","autoName","getBookmarksForConversation","updateBookmarkName","newName","store","data","logAllBookmarks","bookmarks","byConversation","acc","bookmark","deleteBookmark","solidBookmarkIcon","hollowBookmarkIcon","closeIcon","createBookmarkList","toggleBtn","isListVisible","container","title","list","updateBookmarkList","a","b","item","icon","text","btnContainer","editBtn","e","input","saveEdit","ev","deleteBtn","targetElement","lastUrl","currentUrl","addBookmarkButton","el","turnNumber","button","error","processElements","index","article","observer","mutations","mutation"],"mappings":"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"}